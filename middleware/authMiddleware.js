const jwt = require('jsonwebtoken');

function authMiddleware(req, res, next) {
    console.log('üîç AuthMiddleware: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è', req.method, req.path);

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authHeader = req.headers.authorization;
    console.log('üìã Authorization header:', authHeader);

    if (!authHeader) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
        return res.status(401).json({ message: "Token not provided" });
    }

    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "Bearer <token>"
    const tokenParts = authHeader.split(' ');
    if (tokenParts[0] !== 'Bearer' || !tokenParts[1]) {
        console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
        return res.status(401).json({ message: "Invalid token format" });
    }

    const token = tokenParts[1];
    console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JWT_SECRET
    if (!process.env.JWT_SECRET) {
        console.error('‚ùå JWT_SECRET is not defined');
        return res.status(500).json({ message: "Server configuration error" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
        if (err) {
            console.error('‚ùå JWT verification error:', err.message);
            return res.status(403).json({ message: "Invalid token" });
        }
        console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', decoded);
        req.user = decoded;
        next();
    });
}

module.exports = authMiddleware;